import java_cup.runtime.*; 

parser code {:
public static String section = "Main Body Declaration";
public static int numOfErrors = 0;
public static int numOfMains = 0;

public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
}

public void syntax_error(Symbol cur_token) {
    numOfErrors++;
    report_error("Syntax error at line " + (cur_token.left+1) +
   ", column " + (cur_token.right+1) + " at section " + QCup.section , cur_token);
}

:} 
 
terminal        ID, BOOL, FLOAT, INT, EQ, NOTEQ, EQCOMP, LESS, LESSOREQ, GREATER, GREATEROREQ, PLUS, MINUS, TIMES, DIVIDE, POWER,
                NOT, OR, AND, SEMI, TYPE, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LSQPAREN, RSQPAREN, COMMA, LEN, DOT,
                STRING_LITERAL, CHAR, TDEF, FDEF, VOID, RETURN, IN, IF, ELSE, DO, WHILE, REPEAT, UNTIL, CONCAT,
                LTUPLE, RTUPLE;

non terminal    program, declList, sequence, expr, fcall, sequenceOptional, typeSpecifier, value, 
                fieldDecl, fieldDeclOptional, variableDecl, typeDecl, returnStmt,
                functionDecl, functionDeclVoid, functionDeclReturn, funcStmtList, funcStmt, funcStmtNoFollowingSubstmt, funcBlockStmt,
                mainDecl, mainStmtList, mainStmt, mainStmtNoFollowingSubstmt, mainBlockStmt;


precedence nonassoc EQ, NOTEQ;
precedence left OR, AND;
precedence left EQCOMP,LESS, LESSOREQ, GREATER, GREATEROREQ, IN;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right POWER;
precedence left NOT;
precedence left LPAREN, RPAREN;
precedence left ELSE, CONCAT, DOT;


program             ::= declList mainDecl
	                    {: 
	                    QCup.section = "Main Declaration"; 
	                    if(QCup.numOfErrors == 0) System.out.println("Parsing successful");
	                    else if(QCup.numOfErrors == 1) System.out.println("Parsing unsuccessful, you had " + QCup.numOfErrors + " error.");
	                    else System.out.println("Parsing unsuccessful, you had " + QCup.numOfErrors + " errors."); 
	                    if(parser.numOfMains > 1) System.err.println("You declared " + parser.numOfMains + " main programs. Only one main is accepted."); :}
	                    | declList error {: System.err.println("No main declaration at the end of file"); :}
	                    ; 

declList             ::= declList mainDecl
						{: QCup.section = "Main Body Declaration"; :}
                        | declList typeDecl
                        {: QCup.section = "Type Declaration"; :}
                        | declList variableDecl
                        {: QCup.section = "Variable Declaration"; :} 
                        | declList functionDecl
                        {: QCup.section = "Function Declaration"; :}
                        | 
                        | declList error RBRACE {: System.err.println("Invalid function definition"); :}
                        ;
                    
typeDecl            ::= TDEF ID COLON fieldDecl SEMI
                        | TDEF error SEMI {: System.err.println("Invalid type declaration"); :}
                        ;
                    
variableDecl        ::= ID COLON typeSpecifier SEMI
                        | ID COLON typeSpecifier EQ sequence SEMI 
                        | ID COLON error SEMI {: System.err.println("Invalid variable declaration"); :}
                        ;


functionDecl        ::= functionDeclVoid
                        | functionDeclReturn                        
                        | FDEF error RBRACE {: System.err.println("Invalid function definition or missing return statement"); :}
                        ;
                    

functionDeclReturn  ::= FDEF ID LPAREN fieldDeclOptional RPAREN COLON typeSpecifier LBRACE funcStmtList returnStmt RBRACE
                        ;
                        

functionDeclVoid    ::= FDEF ID LPAREN fieldDeclOptional RPAREN COLON VOID LBRACE funcStmtList RBRACE
                        ;


mainDecl     		::= LBRACE mainStmtList RBRACE 
                        {: if(parser.numOfMains > 1){ parser.numOfErrors ++; }
                               else parser.numOfMains ++; :}
                        | LBRACE error RBRACE {: System.err.println("Invalid main body"); :}
                        ;

 
fieldDeclOptional   ::= fieldDecl
						|
                        ;
                                  

fieldDecl           ::= fieldDecl COMMA ID COLON typeSpecifier 
                        | ID COLON typeSpecifier
                        ;
                    
sequence            ::= sequence COMMA expr
                        | expr
                        ;
        
typeSpecifier      	::= TYPE
                        | ID
                        ;           

mainStmtList        ::= mainStmtList variableDecl
						| mainStmtList mainStmt
                        |
                        ;
                        
                        
funcStmtList		::= funcStmtList variableDecl
                     	| funcStmtList funcStmt
                    	|
                     	;

sequenceOptional  	::= sequence
                        |
                        ;
                        
                        
fcall               ::= ID LPAREN sequenceOptional RPAREN
                        ;

                
mainStmt           	::= mainStmtNoFollowingSubstmt
                        | IF LPAREN expr RPAREN mainBlockStmt
                        | IF error RBRACE {: System.err.println("Invalid if statement"); :}
                        | IF LPAREN expr RPAREN mainBlockStmt ELSE mainBlockStmt
                        | WHILE LPAREN expr RPAREN DO mainBlockStmt  
                        | WHILE error RBRACE {: System.err.println("Invalid while statement"); :} 
                        ;
                        
                  
funcStmt          	::= funcStmtNoFollowingSubstmt
                        | IF LPAREN expr RPAREN funcBlockStmt
                        | IF error RBRACE {: System.err.println("Invalid if statement"); :}
                        | IF LPAREN expr RPAREN funcBlockStmt ELSE funcBlockStmt
                        | WHILE LPAREN expr RPAREN DO funcBlockStmt  
                        | WHILE error RBRACE {: System.err.println("Invalid while statement"); :} 
                        ;
                  
funcBlockStmt      	::= LBRACE funcStmtList RBRACE
                        | error SEMI {: System.err.println("Braces are neccessary"); :} 
                        ;
                        
mainBlockStmt     	::= LBRACE mainStmtList RBRACE
                        | error SEMI {: System.err.println("Braces are neccessary"); :} 
                        ;
                      
funcStmtNoFollowingSubstmt 		::= SEMI
                                    | returnStmt
                                    | REPEAT funcBlockStmt UNTIL LPAREN expr RPAREN
                                    | expr SEMI
                                    | REPEAT error SEMI
                                    ; 
     
mainStmtNoFollowingSubstmt 		::= SEMI
                                    | REPEAT mainBlockStmt UNTIL LPAREN expr RPAREN
                                    | expr SEMI
                                    | REPEAT error SEMI
                                    ;     
                               
returnStmt    		 ::= RETURN SEMI 
                        | RETURN expr SEMI  
                        ;
  
expr				 ::= ID
                        | value
                        | fcall
                        | expr DOT expr 
                        | expr EQ expr 
                        | expr CONCAT expr
                        | LEN LPAREN expr RPAREN 
                        | expr LSQPAREN expr RSQPAREN
                        | expr LSQPAREN expr COLON expr RSQPAREN
                        | expr LSQPAREN COLON expr RSQPAREN
                        | expr LSQPAREN expr COLON RSQPAREN
                        | expr PLUS expr
                        | expr MINUS expr
                        | expr TIMES expr
                        | expr DIVIDE expr
                        | expr POWER expr 
                        | expr EQCOMP expr
                        | expr NOTEQ expr
                        | expr LESS expr
                        | expr LESSOREQ expr
                        | expr GREATER expr
                        | expr GREATEROREQ expr 
                        | expr OR expr
                        | expr AND expr
                        | NOT expr
                        | expr IN expr
                        | LPAREN expr RPAREN
                        | LTUPLE sequenceOptional RTUPLE
                        | LSQPAREN sequenceOptional RSQPAREN
                        | INT INT {: parser.numOfErrors++; System.err.println("Cannot have two adjacent numbers with no operator in between.\n"); :} 
                        | ID error SEMI {: System.err.println("Invalid expression"); :} 
                        | value error SEMI {: System.err.println("Invalid expression"); :} 
                        ;

value 				::= BOOL
                        | INT
                        | FLOAT
                        | STRING_LITERAL
                        | CHAR
                        ;
