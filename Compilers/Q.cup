import java_cup.runtime.*; 

parser code {:
public String section = "main";
public void syntax_error(Symbol cur_token) {
report_error("Syntax error at line " + (cur_token.left+1) +
", column " + cur_token.right + " at section " + section, cur_token);
}
:} 
 
terminal		ID, BOOL, FLOAT, INT, EQ, NOTEQ, EQCOMP, LESS, LESSOREQ, GREATER, GREATEROREQ, PLUS, MINUS, TIMES, DIVIDE, POWER, NOT, OR, AND, SEMI, TYPE, COLON, LPAREN, RPAREN, LBRACE, RBRACE, LSQPAREN, RSQPAREN, COMMA, PIPE,
				STRING_LITERAL, CHAR, TDEF, FDEF, VOID, TEST, RETURN, IN, IF, ELSE, DO, WHILE, REPEAT, UNTIL, MAIN;

non terminal	program, grammar, variableDecl, initalisation, list, simpleInit, tuple,
				fieldDecl, typeDecl, fcall, parametersOptional, parameters, functionDeclList, typeDeclList, 
				variableDeclList, newDT, type_specifier, functionDecl, fbody, fbodyblock,
				statement, statementList, returnStatement, expr, mainFunction, 
				ifThenStatement, ifThenElseStatement, whileDoStatement, repeatUntilStatement, 
				exprOptional, statementNoFollowingSubstatement, emptyStatement, blockStatement;


precedence nonassoc EQ, NOTEQ;
precedence left OR, AND;
precedence left EQCOMP,LESS, LESSOREQ, GREATER, GREATEROREQ, IN;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right POWER;
precedence left NOT;
precedence left LPAREN, RPAREN;
precedence left ELSE;



program ::= grammar {: System.out.println("========end parsing=========="); :}
	; 

grammar			::= typeDeclList variableDeclList functionDeclList
	 				;

	 	 				
functionDeclList::= functionDeclList functionDecl mainFunction
{: parser.section = "Function Declaration"; :}
					| 
					;
									
typeDeclList	::= typeDeclList typeDecl
{: parser.section = "Type Declaration"; :}
					| 
					;
					
variableDeclList::= variableDeclList variableDecl
{: parser.section = "Variable Declaration"; :} 
					| 
					;
					
typeDecl 		::= TDEF ID COLON fieldDecl SEMI
					| TDEF error SEMI {: System.err.println("Invalid type declaration"); :}
					;

fieldDecl		::= fieldDecl COMMA ID COLON TYPE 
					| fieldDecl COMMA ID COLON ID 
					| ID COLON TYPE
					| ID COLON ID
					;
 				
variableDecl  	::=	ID COLON TYPE SEMI
					| ID COLON TYPE EQ initalisation SEMI 
					| ID COLON ID EQ newDT SEMI
					| error SEMI {: System.err.println("Invalid variable declaration"); :}
					;

newDT			::= newDT COMMA initalisation
					| initalisation
					;

initalisation	::= LSQPAREN PIPE tuple PIPE RSQPAREN 
					| LSQPAREN list RSQPAREN
					| simpleInit
					| ID
					;
					
tuple			::= tuple COMMA initalisation
					| initalisation
					;
				
list 			::= list COMMA initalisation
					| initalisation
					;
				 
simpleInit		::=  BOOL
					| INT
					| FLOAT
					| STRING_LITERAL
					| CHAR
					; 
				
type_specifier  ::= TYPE
					| VOID
					| ID
					; 			
	
	
mainFunction 	 ::= MAIN LBRACE fbody RBRACE;
					  
					  
functionDecl	  ::= FDEF ID LPAREN fieldDecl RPAREN COLON type_specifier LBRACE fbody RBRACE;


fbodyblock 		::= variableDecl
					| statement
					| fcall
					;


fbody 			::= fbody fbodyblock
					| fbodyblock					
				    ;


parametersOptional ::= | parameters
					   ;

parameters 		::= expr
					| parameters COMMA expr
					;
			  
fcall  			::= ID LPAREN parametersOptional RPAREN SEMI
					;

returnStatement ::=  RETURN SEMI 
					| RETURN expr SEMI 
					;
					
					
statementList ::= statementList statement 
				  |  
				  ;
statement     ::= statementNoFollowingSubstatement
                  | ifThenStatement
                  | ifThenElseStatement
                  | whileDoStatement
				  ;
				  
blockStatement ::= LBRACE statementList RBRACE
                   | statement
                 ;
				  
ifThenStatement ::= IF LPAREN expr RPAREN blockStatement
                    ;
       
ifThenElseStatement ::= IF LPAREN expr RPAREN blockStatement ELSE blockStatement
                    ;    
                    
whileDoStatement    ::= WHILE LPAREN expr RPAREN DO blockStatement         
				       ;
				      
statementNoFollowingSubstatement ::= emptyStatement
                                    | returnStatement
                                    | repeatUntilStatement
                                    | expr SEMI
                                    ; 
                                    
repeatUntilStatement ::= REPEAT blockStatement UNTIL LPAREN expr RPAREN
                        ;
                                    
                                    
emptyStatement ::= 
                   SEMI
                   ;
			
                      			  
expr          ::= TEST
                  | ID
                  | BOOL
                  | INT
                  | FLOAT
                  | expr PLUS expr
                  | expr MINUS expr
                  | expr TIMES expr
                  | expr DIVIDE expr
                  | expr POWER expr
                  | expr EQCOMP expr
                  | expr NOTEQ expr
                  | expr LESS expr
                  | expr LESSOREQ expr
                  | expr GREATER expr
                  | expr GREATEROREQ expr
                  | expr OR expr
                  | expr AND expr
                  | NOT expr
                  | expr IN expr
                  | LPAREN expr RPAREN 
			      ;
			   
exprOptional ::= 
                 | expr
                 ;
