<<<<<<< HEAD
/* The following code was generated by JFlex 1.4.3 on 3/14/13 5:37 PM */

import java_cup.runtime.*;

=======
/* The following code was generated by JFlex 1.4.3 on 3/14/13 5:47 PM */

import java_cup.runtime.*;

>>>>>>> ca2e5bf829ca8bb2aa3f19a4694dd9fca44e3420

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
<<<<<<< HEAD
 * on 3/14/13 5:37 PM from the specification file
 * <tt>/home/sjo/Programming/COMP2010/Compilers/QCompiler/Compilers/Q.lex</tt>
=======
 * on 3/14/13 5:47 PM from the specification file
 * <tt>C:/Users/EmilGeorge/Documents/GitHub/QCompiler/Compilers/Q.lex</tt>
>>>>>>> ca2e5bf829ca8bb2aa3f19a4694dd9fca44e3420
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int TRADITIONALCOMMENT = 6;
  public static final int ENDOFLINECOMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\24\1\2\1\0\1\24\1\1\16\5\4\0\1\24\1\42"+
    "\1\62\1\0\1\5\1\0\1\52\1\35\1\55\1\56\1\46\1\45"+
    "\1\61\1\7\1\0\1\47\1\6\11\3\1\40\1\37\1\43\1\41"+
    "\1\44\2\0\3\36\1\23\4\36\1\22\5\36\1\21\6\36\1\20"+
    "\4\36\1\53\1\66\1\54\1\50\1\5\1\0\1\15\1\31\1\33"+
    "\1\63\1\13\1\14\1\32\1\34\1\25\2\4\1\16\1\4\1\26"+
    "\1\27\1\30\1\4\1\11\1\17\1\10\1\12\1\4\1\64\1\65"+
    "\2\4\1\57\1\51\1\60\1\0\41\5\2\0\4\5\4\0\1\5"+
    "\2\0\1\5\7\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5"+
    "\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5"+
    "\21\0\165\5\1\0\2\5\2\0\4\5\10\0\1\5\1\0\3\5"+
    "\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5\1\0\5\5"+
    "\2\0\236\5\11\0\46\5\2\0\1\5\7\0\47\5\11\0\55\5"+
    "\1\0\1\5\1\0\2\5\1\0\2\5\1\0\1\5\10\0\33\5"+
    "\5\0\3\5\15\0\4\5\7\0\1\5\4\0\13\5\5\0\112\5"+
    "\4\0\146\5\1\0\11\5\1\0\12\5\1\0\23\5\2\0\1\5"+
    "\17\0\74\5\2\0\145\5\16\0\66\5\4\0\1\5\5\0\56\5"+
    "\22\0\34\5\244\0\144\5\2\0\12\5\1\0\7\5\1\0\7\5"+
    "\1\0\3\5\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\1\5\3\0\4\5\2\0\11\5\2\0\2\5\2\0\4\5"+
    "\10\0\1\5\4\0\2\5\1\0\5\5\2\0\16\5\7\0\1\5"+
    "\5\0\3\5\1\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\5\1\0\5\5"+
    "\4\0\2\5\2\0\3\5\3\0\1\5\7\0\4\5\1\0\1\5"+
    "\7\0\20\5\13\0\3\5\1\0\11\5\1\0\3\5\1\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\2\0\12\5\1\0\3\5"+
    "\1\0\3\5\2\0\1\5\17\0\4\5\2\0\12\5\1\0\1\5"+
    "\17\0\3\5\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\5\5\2\0\11\5\2\0\2\5\2\0\3\5"+
    "\10\0\2\5\4\0\2\5\1\0\5\5\2\0\12\5\1\0\1\5"+
    "\20\0\2\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5"+
    "\4\0\5\5\3\0\3\5\1\0\4\5\2\0\1\5\6\0\1\5"+
    "\16\0\12\5\11\0\1\5\7\0\3\5\1\0\10\5\1\0\3\5"+
    "\1\0\27\5\1\0\12\5\1\0\5\5\3\0\10\5\1\0\3\5"+
    "\1\0\4\5\7\0\2\5\1\0\2\5\6\0\4\5\2\0\12\5"+
    "\22\0\2\5\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\2\0\11\5\1\0\3\5\1\0\4\5\7\0\2\5"+
    "\7\0\1\5\1\0\4\5\2\0\12\5\1\0\2\5\17\0\2\5"+
    "\1\0\10\5\1\0\3\5\1\0\51\5\2\0\10\5\1\0\3\5"+
    "\1\0\5\5\10\0\1\5\10\0\4\5\2\0\12\5\12\0\6\5"+
    "\2\0\2\5\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5"+
    "\2\0\7\5\3\0\1\5\4\0\6\5\1\0\1\5\1\0\10\5"+
    "\22\0\2\5\15\0\72\5\4\0\20\5\1\0\12\5\47\0\2\5"+
    "\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5"+
    "\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5"+
    "\1\0\15\5\1\0\3\5\2\0\5\5\1\0\1\5\1\0\6\5"+
    "\2\0\12\5\2\0\2\5\42\0\1\5\27\0\2\5\6\0\12\5"+
    "\13\0\1\5\1\0\1\5\1\0\1\5\4\0\12\5\1\0\44\5"+
    "\4\0\24\5\1\0\22\5\1\0\44\5\11\0\1\5\71\0\112\5"+
    "\6\0\116\5\2\0\46\5\12\0\53\5\1\0\1\5\3\0\u0149\5"+
    "\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\51\5"+
    "\1\0\4\5\2\0\41\5\1\0\4\5\2\0\7\5\1\0\1\5"+
    "\1\0\4\5\2\0\17\5\1\0\71\5\1\0\4\5\2\0\103\5"+
    "\2\0\3\5\40\0\20\5\20\0\125\5\14\0\u026c\5\2\0\21\5"+
    "\1\0\32\5\5\0\113\5\3\0\3\5\17\0\15\5\1\0\7\5"+
    "\13\0\25\5\13\0\24\5\14\0\15\5\1\0\3\5\1\0\2\5"+
    "\14\0\124\5\3\0\1\5\3\0\3\5\2\0\12\5\41\0\3\5"+
    "\2\0\12\5\6\0\130\5\10\0\53\5\5\0\106\5\12\0\35\5"+
    "\3\0\14\5\4\0\14\5\12\0\50\5\2\0\5\5\13\0\54\5"+
    "\4\0\32\5\6\0\12\5\46\0\34\5\4\0\77\5\1\0\35\5"+
    "\2\0\13\5\6\0\12\5\15\0\1\5\130\0\114\5\4\0\12\5"+
    "\21\0\11\5\14\0\53\5\3\0\14\5\6\0\64\5\14\0\70\5"+
    "\10\0\12\5\3\0\61\5\122\0\3\5\1\0\37\5\15\0\347\5"+
    "\25\0\u011a\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5"+
    "\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5"+
    "\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\16\0\5\5"+
    "\32\0\5\5\20\0\2\5\23\0\1\5\13\0\5\5\5\0\6\5"+
    "\1\0\1\5\15\0\1\5\20\0\15\5\3\0\32\5\26\0\15\5"+
    "\4\0\1\5\3\0\14\5\21\0\1\5\4\0\1\5\2\0\12\5"+
    "\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\13\5\2\0\4\5\5\0\5\5\4\0\1\5"+
    "\21\0\51\5\u0a77\0\57\5\1\0\57\5\1\0\205\5\6\0\7\5"+
    "\16\0\46\5\12\0\66\5\11\0\1\5\17\0\30\5\11\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\40\5\57\0\1\5\u01d5\0\3\5"+
    "\31\0\17\5\1\0\5\5\2\0\5\5\4\0\126\5\2\0\2\5"+
    "\2\0\3\5\1\0\132\5\1\0\4\5\5\0\51\5\3\0\136\5"+
    "\21\0\33\5\65\0\20\5\u0200\0\u19b6\5\112\0\u51cc\5\64\0\u048d\5"+
    "\103\0\56\5\2\0\u010d\5\3\0\34\5\24\0\60\5\14\0\2\5"+
    "\1\0\31\5\10\0\122\5\45\0\11\5\2\0\147\5\2\0\4\5"+
    "\1\0\2\5\16\0\12\5\120\0\56\5\20\0\1\5\7\0\64\5"+
    "\14\0\105\5\13\0\12\5\6\0\30\5\3\0\1\5\4\0\56\5"+
    "\2\0\44\5\14\0\35\5\3\0\101\5\16\0\13\5\46\0\67\5"+
    "\11\0\16\5\2\0\12\5\6\0\27\5\3\0\2\5\4\0\103\5"+
    "\30\0\3\5\43\0\6\5\2\0\6\5\2\0\6\5\11\0\7\5"+
    "\1\0\7\5\221\0\53\5\1\0\2\5\2\0\12\5\6\0\u2ba4\5"+
    "\14\0\27\5\4\0\61\5\u2104\0\u012e\5\2\0\76\5\2\0\152\5"+
    "\46\0\7\5\14\0\5\5\5\0\14\5\1\0\15\5\1\0\5\5"+
    "\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5"+
    "\22\0\100\5\2\0\66\5\50\0\15\5\3\0\20\5\20\0\7\5"+
    "\14\0\2\5\30\0\3\5\31\0\1\5\6\0\5\5\1\0\207\5"+
    "\2\0\1\5\4\0\1\5\13\0\12\5\7\0\32\5\4\0\1\5"+
    "\1\0\32\5\13\0\131\5\3\0\6\5\2\0\6\5\2\0\6\5"+
    "\2\0\3\5\3\0\2\5\3\0\2\5\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\3\1\5\7\4"+
    "\1\1\3\4\1\1\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\4"+
    "\1\31\1\32\1\33\2\34\2\2\3\0\14\4\1\0"+
    "\1\35\3\4\1\0\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\4\1\47\1\50\1\51"+
    "\1\52\2\53\14\4\1\0\1\54\2\4\1\55\1\4"+
    "\1\56\2\4\1\57\3\4\1\60\1\61\1\4\1\62"+
    "\4\4\1\63\1\4\1\64\1\4\1\65\1\66\1\4"+
    "\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\334\0\334"+
    "\0\u0483\0\u04ba\0\u04f1\0\u0528\0\334\0\334\0\u055f\0\334"+
    "\0\u0596\0\u05cd\0\334\0\334\0\334\0\334\0\334\0\334"+
    "\0\334\0\334\0\u0604\0\u063b\0\u0672\0\334\0\u06a9\0\u06e0"+
    "\0\334\0\u0717\0\u074e\0\u0785\0\u07bc\0\u0181\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u014a\0\u0abe\0\u0af5\0\u0b2c\0\u0b63"+
    "\0\334\0\334\0\334\0\334\0\334\0\334\0\334\0\334"+
    "\0\u014a\0\u0b9a\0\334\0\334\0\334\0\334\0\u0785\0\u07bc"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u014a\0\u0e9c\0\u0ed3"+
    "\0\334\0\u0f0a\0\u014a\0\u0f41\0\u0f78\0\u014a\0\u0faf\0\u0fe6"+
    "\0\u101d\0\u014a\0\u014a\0\u1054\0\334\0\u108b\0\u10c2\0\u10f9"+
    "\0\u1130\0\u014a\0\u1167\0\u014a\0\u119e\0\u014a\0\u014a\0\u11d5"+
    "\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\5\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\10\1\20\1\21\1\22"+
    "\3\5\1\6\1\23\3\10\1\24\1\10\1\25\1\10"+
    "\1\26\1\5\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\10\1\5\1\55\2\0\57\55\1\56\3\55\1\57"+
    "\1\6\1\60\1\61\65\6\1\62\44\6\1\63\20\6"+
    "\67\0\2\64\1\0\1\7\2\64\1\7\60\64\3\0"+
    "\4\10\1\0\14\10\1\0\10\10\1\0\1\10\24\0"+
    "\3\10\1\0\2\64\1\0\1\65\2\64\1\65\60\64"+
    "\3\0\1\7\2\0\1\66\63\0\4\10\1\0\1\10"+
    "\1\67\1\70\1\71\10\10\1\0\10\10\1\0\1\10"+
    "\24\0\1\72\2\10\4\0\4\10\1\0\3\10\1\73"+
    "\10\10\1\0\10\10\1\0\1\10\24\0\3\10\4\0"+
    "\4\10\1\0\14\10\1\0\1\10\1\74\6\10\1\0"+
    "\1\10\24\0\3\10\4\0\4\10\1\0\6\10\1\75"+
    "\5\10\1\0\10\10\1\0\1\10\24\0\3\10\4\0"+
    "\4\10\1\0\5\10\1\76\1\77\5\10\1\0\10\10"+
    "\1\0\1\10\24\0\1\100\2\10\4\0\4\10\1\0"+
    "\14\10\1\0\1\101\7\10\1\0\1\10\24\0\3\10"+
    "\4\0\4\10\1\0\1\102\13\10\1\0\10\10\1\0"+
    "\1\10\24\0\3\10\22\0\1\103\50\0\4\10\1\0"+
    "\4\10\1\104\7\10\1\0\1\10\1\105\6\10\1\0"+
    "\1\10\24\0\3\10\4\0\4\10\1\0\14\10\1\0"+
    "\2\10\1\106\5\10\1\0\1\10\24\0\3\10\4\0"+
    "\4\10\1\0\14\10\1\0\7\10\1\107\1\0\1\10"+
    "\24\0\3\10\4\0\2\110\1\0\1\110\1\0\14\110"+
    "\1\0\10\110\1\0\1\110\24\0\3\110\42\0\1\111"+
    "\66\0\1\112\66\0\1\113\66\0\1\114\73\0\1\115"+
    "\1\116\70\0\1\117\67\0\1\120\17\0\4\10\1\0"+
    "\14\10\1\0\2\10\1\121\5\10\1\0\1\10\24\0"+
    "\3\10\4\0\4\10\1\0\14\10\1\0\7\10\1\122"+
    "\1\0\1\10\24\0\3\10\1\0\1\55\2\0\57\55"+
    "\1\0\3\55\11\0\1\123\1\124\14\0\1\125\33\0"+
    "\1\126\6\0\1\61\66\0\1\6\133\0\1\61\22\0"+
    "\1\127\2\0\1\127\60\0\2\64\1\0\1\130\2\64"+
    "\1\130\60\64\3\0\4\10\1\0\2\10\1\131\11\10"+
    "\1\0\10\10\1\0\1\10\24\0\3\10\4\0\4\10"+
    "\1\0\14\10\1\0\3\10\1\132\4\10\1\0\1\10"+
    "\24\0\3\10\4\0\4\10\1\0\7\10\1\133\4\10"+
    "\1\0\10\10\1\0\1\10\24\0\3\10\4\0\4\10"+
    "\1\0\3\10\1\134\10\10\1\0\10\10\1\0\1\10"+
    "\24\0\3\10\4\0\4\10\1\0\1\135\13\10\1\0"+
    "\3\10\1\136\4\10\1\0\1\10\24\0\3\10\4\0"+
    "\4\10\1\0\1\137\13\10\1\0\10\10\1\0\1\10"+
    "\24\0\3\10\4\0\4\10\1\0\7\10\1\140\4\10"+
    "\1\0\10\10\1\0\1\10\24\0\3\10\4\0\4\10"+
    "\1\0\6\10\1\141\5\10\1\0\10\10\1\0\1\10"+
    "\24\0\3\10\4\0\4\10\1\0\14\10\1\0\2\10"+
    "\1\142\5\10\1\0\1\10\24\0\3\10\4\0\4\10"+
    "\1\0\3\10\1\143\10\10\1\0\10\10\1\0\1\10"+
    "\24\0\3\10\4\0\4\10\1\0\7\10\1\105\4\10"+
    "\1\0\10\10\1\0\1\10\24\0\3\10\4\0\4\10"+
    "\1\0\1\10\1\144\12\10\1\0\10\10\1\0\1\10"+
    "\24\0\3\10\23\0\1\145\47\0\4\10\1\0\1\146"+
    "\13\10\1\0\10\10\1\0\1\10\24\0\3\10\4\0"+
    "\4\10\1\0\14\10\1\0\2\10\1\147\5\10\1\0"+
    "\1\10\24\0\3\10\4\0\4\10\1\0\5\10\1\150"+
    "\6\10\1\0\10\10\1\0\1\10\24\0\3\10\36\0"+
    "\1\151\34\0\4\10\1\0\14\10\1\0\1\152\7\10"+
    "\1\0\1\10\24\0\3\10\4\0\4\10\1\0\3\10"+
    "\1\153\10\10\1\0\10\10\1\0\1\10\24\0\3\10"+
    "\4\0\4\10\1\0\6\10\1\154\5\10\1\0\10\10"+
    "\1\0\1\10\24\0\3\10\4\0\4\10\1\0\1\155"+
    "\13\10\1\0\10\10\1\0\1\10\24\0\3\10\4\0"+
    "\4\10\1\0\4\10\1\156\7\10\1\0\10\10\1\0"+
    "\1\10\24\0\3\10\4\0\4\10\1\0\2\10\1\157"+
    "\11\10\1\0\10\10\1\0\1\10\24\0\3\10\4\0"+
    "\4\10\1\0\3\10\1\160\10\10\1\0\10\10\1\0"+
    "\1\10\24\0\3\10\4\0\4\10\1\0\14\10\1\0"+
    "\1\161\7\10\1\0\1\10\24\0\3\10\4\0\4\10"+
    "\1\0\3\10\1\162\10\10\1\0\10\10\1\0\1\10"+
    "\24\0\3\10\4\0\4\10\1\0\7\10\1\131\4\10"+
    "\1\0\10\10\1\0\1\10\24\0\3\10\4\0\4\10"+
    "\1\0\5\10\1\105\6\10\1\0\10\10\1\0\1\10"+
    "\24\0\3\10\4\0\4\10\1\0\4\10\1\163\7\10"+
    "\1\0\10\10\1\0\1\10\24\0\3\10\4\0\4\10"+
    "\1\0\14\10\1\0\1\164\7\10\1\0\1\10\24\0"+
    "\3\10\24\0\1\165\46\0\4\10\1\0\6\10\1\146"+
    "\5\10\1\0\10\10\1\0\1\10\24\0\3\10\4\0"+
    "\4\10\1\0\1\10\1\146\12\10\1\0\10\10\1\0"+
    "\1\10\24\0\3\10\4\0\4\10\1\0\6\10\1\166"+
    "\5\10\1\0\10\10\1\0\1\10\24\0\3\10\4\0"+
    "\4\10\1\0\3\10\1\146\10\10\1\0\10\10\1\0"+
    "\1\10\24\0\3\10\4\0\4\10\1\0\3\10\1\167"+
    "\10\10\1\0\10\10\1\0\1\10\24\0\3\10\4\0"+
    "\4\10\1\0\1\10\1\170\12\10\1\0\10\10\1\0"+
    "\1\10\24\0\3\10\4\0\4\10\1\0\5\10\1\171"+
    "\6\10\1\0\10\10\1\0\1\10\24\0\3\10\4\0"+
    "\4\10\1\0\6\10\1\172\5\10\1\0\10\10\1\0"+
    "\1\10\24\0\3\10\4\0\4\10\1\0\14\10\1\0"+
    "\1\10\1\173\6\10\1\0\1\10\24\0\3\10\4\0"+
    "\4\10\1\0\3\10\1\174\10\10\1\0\10\10\1\0"+
    "\1\10\24\0\3\10\4\0\4\10\1\0\14\10\1\0"+
    "\10\10\1\0\1\10\24\0\2\10\1\175\4\0\4\10"+
    "\1\0\14\10\1\0\1\10\1\176\6\10\1\0\1\10"+
    "\24\0\3\10\4\0\4\10\1\0\1\177\13\10\1\0"+
    "\10\10\1\0\1\10\24\0\3\10\4\0\4\10\1\0"+
    "\14\10\1\0\5\10\1\146\2\10\1\0\1\10\24\0"+
    "\3\10\4\0\4\10\1\0\14\10\1\0\3\10\1\200"+
    "\4\10\1\0\1\10\24\0\3\10\4\0\4\10\1\0"+
    "\1\10\1\201\12\10\1\0\10\10\1\0\1\10\24\0"+
    "\3\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4620];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\20\1\2\11\4\1\2\11\1\1\1\11"+
    "\2\1\10\11\3\1\1\11\2\1\1\11\2\1\3\0"+
    "\14\1\1\0\4\1\1\0\10\11\2\1\4\11\16\1"+
    "\1\0\3\1\1\11\13\1\1\11\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
<<<<<<< HEAD
  StringBuffer string = new StringBuffer();
  
    private Symbol symbol(int type) { 
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }
  
  public int getLineNumber() { return yyline + 1; }
=======
  StringBuffer string = new StringBuffer();
  
    private Symbol symbol(int type) { 
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }
  
  public int getLineNumber() { return yyline + 1; }
>>>>>>> ca2e5bf829ca8bb2aa3f19a4694dd9fca44e3420


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1918) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [60] { return symbol(sym.RPAREN); }");
          { return symbol(sym.RPAREN);
          }
        case 56: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [95] { string.append(\'\\t\'); }");
          { string.append('\t');
          }
        case 57: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [57] { return symbol(sym.LSQPAREN); }");
          { return symbol(sym.LSQPAREN);
          }
        case 58: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [61] { return symbol(sym.LBRACE); }");
          { return symbol(sym.LBRACE);
          }
        case 59: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [65] { string.setLength(0); yybegin(STRING); }");
          { string.setLength(0); yybegin(STRING);
          }
        case 60: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [56] { return symbol(sym.AND); }");
          { return symbol(sym.AND);
          }
        case 61: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [46] { return symbol(sym.LESSOREQ); }");
          { return symbol(sym.LESSOREQ);
          }
        case 62: break;
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [54] { return symbol(sym.NOT); }");
          { return symbol(sym.NOT);
          }
        case 63: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [100] { string.append(\'\\\\\'); }");
          { string.append('\\');
          }
        case 64: break;
        case 53: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [66] { return symbol(sym.RETURN); }");
          { return symbol(sym.RETURN);
          }
        case 65: break;
        case 49: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [75] { return symbol(sym.FDEF); }");
          { return symbol(sym.FDEF);
          }
        case 66: break;
        case 40: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [98] { string.append(\'\\r\'); }");
          { string.append('\r');
          }
        case 67: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [76] { yybegin(ENDOFLINECOMMENT); }");
          { yybegin(ENDOFLINECOMMENT);
          }
        case 68: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [104] { yybegin(YYINITIAL); }");
          { yybegin(YYINITIAL);
          }
        case 69: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [49] { return symbol(sym.PLUS); }");
          { return symbol(sym.PLUS);
          }
        case 70: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [91] { yybegin(YYINITIAL); "+ZZ_NL+"                                   return symbol(sym.STRING_LITERAL, "+ZZ_NL+"                                   string.toString()); }");
<<<<<<< HEAD
          { yybegin(YYINITIAL); 
                                   return symbol(sym.STRING_LITERAL, 
=======
          { yybegin(YYINITIAL); 
                                   return symbol(sym.STRING_LITERAL, 
>>>>>>> ca2e5bf829ca8bb2aa3f19a4694dd9fca44e3420
                                   string.toString());
          }
        case 71: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [45] { return symbol(sym.LESS); }");
          { return symbol(sym.LESS);
          }
        case 72: break;
        case 55: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [73] { return symbol(sym.TEST); }");
          { return symbol(sym.TEST);
          }
        case 73: break;
        case 46: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [79] { return symbol(sym.BOOL, new Boolean(yytext())); }");
          { return symbol(sym.BOOL, new Boolean(yytext()));
          }
        case 74: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [58] { return symbol(sym.RSQPAREN); }");
          { return symbol(sym.RSQPAREN);
          }
        case 75: break;
        case 44: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [39] { return symbol(sym.TYPE); }");
          { return symbol(sym.TYPE);
          }
        case 76: break;
        case 50: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [84] { return symbol(sym.VOID); }");
          { return symbol(sym.VOID);
          }
        case 77: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [69] { return symbol(sym.DO); }");
          { return symbol(sym.DO);
          }
        case 78: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [51] { return symbol(sym.TIMES); }");
          { return symbol(sym.TIMES);
          }
        case 79: break;
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [85] { System.err.println(\"Illegal character <\"+"+ZZ_NL+"                                                    yytext()+\">\"); }");
<<<<<<< HEAD
          { System.err.println("Illegal character <"+
=======
          { System.err.println("Illegal character <"+
>>>>>>> ca2e5bf829ca8bb2aa3f19a4694dd9fca44e3420
                                                    yytext()+">");
          }
        case 80: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [81] { return symbol(sym.INT, new Integer(yytext())); }");
          { return symbol(sym.INT, new Integer(yytext()));
          }
        case 81: break;
        case 48: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [68] { return symbol(sym.ELSE); }");
          { return symbol(sym.ELSE);
          }
        case 82: break;
        case 42: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [99] { string.append(\'\\\"\'); }");
          { string.append('\"');
          }
        case 83: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [41] { return symbol(sym.COLON); }");
          { return symbol(sym.COLON);
          }
        case 84: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [47] { return symbol(sym.GREATER); }");
          { return symbol(sym.GREATER);
          }
        case 85: break;
        case 52: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [70] { return symbol(sym.WHILE); }");
          { return symbol(sym.WHILE);
          }
        case 86: break;
        case 47: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [74] { return symbol(sym.TDEF); }");
          { return symbol(sym.TDEF);
          }
        case 87: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [67] { return symbol(sym.IF); }");
          { return symbol(sym.IF);
          }
        case 88: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [59] { return symbol(sym.LPAREN); }");
          { return symbol(sym.LPAREN);
          }
        case 89: break;
        case 51: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [72] { return symbol(sym.UNTIL); }");
          { return symbol(sym.UNTIL);
          }
        case 90: break;
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [55] { return symbol(sym.OR); }");
          { return symbol(sym.OR);
          }
        case 91: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [42] { return symbol(sym.EQ); }");
          { return symbol(sym.EQ);
          }
        case 92: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [62] { return symbol(sym.RBRACE); }");
          { return symbol(sym.RBRACE);
          }
        case 93: break;
        case 43: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [82] { return symbol(sym.FLOAT, new Float(yytext())); }");
          { return symbol(sym.FLOAT, new Float(yytext()));
          }
        case 94: break;
        case 41: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [96] { string.append(\'\\n\'); }");
          { string.append('\n');
          }
        case 95: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [40] { return symbol(sym.SEMI); }");
          { return symbol(sym.SEMI);
          }
        case 96: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [50] { return symbol(sym.MINUS); }");
          { return symbol(sym.MINUS);
          }
        case 97: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [64] { return symbol(sym.PIPE); }");
          { return symbol(sym.PIPE);
          }
        case 98: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [77] { yybegin(TRADITIONALCOMMENT); }");
          { yybegin(TRADITIONALCOMMENT);
          }
        case 99: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [80] { return symbol(sym.ID); }");
          { return symbol(sym.ID);
          }
        case 100: break;
        case 33: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [48] { return symbol(sym.GREATEROREQ); }");
          { return symbol(sym.GREATEROREQ);
          }
        case 101: break;
        case 45: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [78] { return symbol(sym.CHAR, yytext()); }");
          { return symbol(sym.CHAR, yytext());
          }
        case 102: break;
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [52] { return symbol(sym.DIVIDE); }");
          { return symbol(sym.DIVIDE);
          }
        case 103: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [44] { return symbol(sym.NOTEQ); }");
          { return symbol(sym.NOTEQ);
          }
        case 104: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [63] { return symbol(sym.COMMA); }");
          { return symbol(sym.COMMA);
          }
        case 105: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [43] { return symbol(sym.EQCOMP); }");
          { return symbol(sym.EQCOMP);
          }
        case 106: break;
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [94] { string.append( yytext() ); }");
          { string.append( yytext() );
          }
        case 107: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [53] { return symbol(sym.POWER); }");
          { return symbol(sym.POWER);
          }
        case 108: break;
        case 54: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [71] { return symbol(sym.REPEAT); }");
          { return symbol(sym.REPEAT);
          }
        case 109: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [83] {  }");
          { 
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          scanner = new Yylex( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
