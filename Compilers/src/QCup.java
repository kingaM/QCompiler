
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 14 23:43:00 GMT 2013
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 14 23:43:00 GMT 2013
  */
public class QCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public QCup() {super();}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\016\005\000\002\016\002\000\002\017\004" +
    "\000\002\017\002\000\002\020\004\000\002\020\002\000" +
    "\002\012\007\000\002\012\005\000\002\011\007\000\002" +
    "\011\007\000\002\011\005\000\002\011\005\000\002\004" +
    "\006\000\002\004\010\000\002\004\010\000\002\004\004" +
    "\000\002\021\005\000\002\021\003\000\002\005\007\000" +
    "\002\005\005\000\002\005\003\000\002\005\003\000\002" +
    "\010\005\000\002\010\003\000\002\006\005\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\032\006\000\002" +
    "\023\014\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\024\004\000\002\024\003\000\002\014\002" +
    "\000\002\014\003\000\002\015\003\000\002\015\005\000" +
    "\002\013\007\000\002\030\004\000\002\030\005\000\002" +
    "\027\004\000\002\027\002\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\042\005" +
    "\000\002\042\003\000\002\033\007\000\002\034\011\000" +
    "\002\035\010\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\004\000\002\036\010\000\002\041" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\004\000" +
    "\002\031\005\000\002\031\005\000\002\037\002\000\002" +
    "\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\001\ufffb\000\002\001\001\000\004\044" +
    "\011\001\ufff9\000\004\002\007\001\002\000\002\001\000" +
    "\000\002\001\ufffc\000\006\003\250\004\247\001\002\000" +
    "\006\003\014\004\013\001\ufffd\000\004\031\124\001\002" +
    "\000\004\027\246\001\002\000\002\001\ufffa\000\004\045" +
    "\017\001\uffff\000\004\004\221\001\002\000\004\060\022" +
    "\001\002\000\002\001\ufffe\000\004\034\023\001\002\000" +
    "\034\003\014\004\044\005\050\006\046\007\027\024\036" +
    "\027\032\032\041\047\030\050\037\052\040\055\033\056" +
    "\054\001\002\000\002\001\uffc2\000\002\001\uffd9\000\040" +
    "\011\070\012\071\013\075\014\077\015\072\016\074\017" +
    "\073\020\064\021\100\022\066\023\101\025\102\026\065" +
    "\027\220\051\067\001\002\000\002\001\uffba\000\002\001" +
    "\uffbd\000\002\001\uffda\000\002\001\uffbe\000\004\032\213" +
    "\001\002\000\002\001\uffc3\000\002\001\uffcc\000\020\004" +
    "\057\005\050\006\046\007\027\024\036\032\041\047\030" +
    "\001\002\000\022\004\057\005\050\006\046\007\027\024" +
    "\036\027\207\032\041\047\030\001\002\000\004\032\201" +
    "\001\002\000\020\004\057\005\050\006\046\007\027\024" +
    "\036\032\041\047\030\001\002\000\002\001\uffc1\000\036" +
    "\003\014\004\044\005\050\006\046\007\027\024\036\027" +
    "\032\032\041\035\175\047\030\050\037\052\040\055\033" +
    "\056\054\001\002\000\006\031\124\032\125\001\uffbc\000" +
    "\002\001\uffca\000\002\001\uffb9\000\002\001\uffd6\000\002" +
    "\001\uffbb\000\002\001\uffd8\000\002\001\uffcb\000\002\001" +
    "\uffc9\000\034\004\057\005\050\006\046\007\027\024\036" +
    "\027\032\032\041\034\056\047\030\050\037\052\040\055" +
    "\033\056\054\001\002\000\002\001\uffc7\000\002\001\uffcd" +
    "\000\002\001\uffbc\000\004\057\061\001\002\000\004\032" +
    "\062\001\002\000\020\004\057\005\050\006\046\007\027" +
    "\024\036\032\041\047\030\001\002\000\040\011\070\012" +
    "\071\013\075\014\077\015\072\016\074\017\073\020\064" +
    "\021\100\022\066\023\101\025\102\026\065\033\076\051" +
    "\067\001\002\000\020\004\057\005\050\006\046\007\027" +
    "\024\036\032\041\047\030\001\002\000\020\004\057\005" +
    "\050\006\046\007\027\024\036\032\041\047\030\001\002" +
    "\000\020\004\057\005\050\006\046\007\027\024\036\032" +
    "\041\047\030\001\002\000\020\004\057\005\050\006\046" +
    "\007\027\024\036\032\041\047\030\001\002\000\020\004" +
    "\057\005\050\006\046\007\027\024\036\032\041\047\030" +
    "\001\002\000\020\004\057\005\050\006\046\007\027\024" +
    "\036\032\041\047\030\001\002\000\020\004\057\005\050" +
    "\006\046\007\027\024\036\032\041\047\030\001\002\000" +
    "\020\004\057\005\050\006\046\007\027\024\036\032\041" +
    "\047\030\001\002\000\020\004\057\005\050\006\046\007" +
    "\027\024\036\032\041\047\030\001\002\000\020\004\057" +
    "\005\050\006\046\007\027\024\036\032\041\047\030\001" +
    "\002\000\002\001\uffbf\000\020\004\057\005\050\006\046" +
    "\007\027\024\036\032\041\047\030\001\002\000\020\004" +
    "\057\005\050\006\046\007\027\024\036\032\041\047\030" +
    "\001\002\000\020\004\057\005\050\006\046\007\027\024" +
    "\036\032\041\047\030\001\002\000\020\004\057\005\050" +
    "\006\046\007\027\024\036\032\041\047\030\001\002\000" +
    "\030\012\071\013\075\014\077\015\072\016\074\017\073" +
    "\020\064\021\100\022\066\023\101\051\067\001\uffad\000" +
    "\004\023\101\001\uffb4\000\004\023\101\001\uffb6\000\014" +
    "\017\073\020\064\021\100\022\066\023\101\001\uffb0\000" +
    "\014\017\073\020\064\021\100\022\066\023\101\001\uffb1" +
    "\000\014\017\073\020\064\021\100\022\066\023\101\001" +
    "\uffae\000\010\021\100\022\066\023\101\001\uffb8\000\014" +
    "\017\073\020\064\021\100\022\066\023\101\001\uffaf\000" +
    "\014\017\073\020\064\021\100\022\066\023\101\001\uffb3" +
    "\000\034\012\071\013\075\014\077\015\072\016\074\017" +
    "\073\020\064\021\100\022\066\023\101\025\102\026\065" +
    "\051\067\001\uffb2\000\014\017\073\020\064\021\100\022" +
    "\066\023\101\001\uffaa\000\004\023\101\001\uffb5\000\030" +
    "\012\071\013\075\014\077\015\072\016\074\017\073\020" +
    "\064\021\100\022\066\023\101\051\067\001\uffac\000\010" +
    "\021\100\022\066\023\101\001\uffb7\000\034\004\057\005" +
    "\050\006\046\007\027\024\036\027\032\032\041\035\123" +
    "\047\030\050\037\052\040\055\033\056\054\001\002\000" +
    "\002\001\uffce\000\002\001\uffc8\000\006\004\135\030\136" +
    "\001\002\000\020\004\057\005\050\006\046\007\027\024" +
    "\036\032\041\047\030\001\uffd5\000\004\033\133\001\002" +
    "\000\036\011\070\012\071\013\075\014\077\015\072\016" +
    "\074\017\073\020\064\021\100\022\066\023\101\025\102" +
    "\026\065\051\067\001\uffd3\000\004\040\131\001\uffd4\000" +
    "\020\004\057\005\050\006\046\007\027\024\036\032\041" +
    "\047\030\001\002\000\036\011\070\012\071\013\075\014" +
    "\077\015\072\016\074\017\073\020\064\021\100\022\066" +
    "\023\101\025\102\026\065\051\067\001\uffd2\000\004\027" +
    "\134\001\002\000\002\001\uffd1\000\004\010\167\001\002" +
    "\000\006\010\137\027\140\001\002\000\020\004\146\005" +
    "\142\006\150\007\141\036\147\042\143\043\151\001\002" +
    "\000\002\001\ufff2\000\002\001\uffe3\000\002\001\uffe4\000" +
    "\002\001\uffe1\000\004\027\166\001\002\000\002\001\uffea" +
    "\000\002\001\uffe9\000\022\004\146\005\142\006\150\007" +
    "\141\036\147\041\152\042\143\043\151\001\002\000\002" +
    "\001\uffe2\000\002\001\uffe0\000\020\004\146\005\142\006" +
    "\150\007\141\036\147\042\143\043\151\001\002\000\002" +
    "\001\uffe5\000\006\037\156\040\155\001\002\000\020\004" +
    "\146\005\142\006\150\007\141\036\147\042\143\043\151" +
    "\001\002\000\002\001\uffeb\000\002\001\uffe6\000\002\001" +
    "\uffe7\000\006\040\162\041\163\001\002\000\020\004\146" +
    "\005\142\006\150\007\141\036\147\042\143\043\151\001" +
    "\002\000\004\037\164\001\002\000\002\001\uffec\000\002" +
    "\001\uffe8\000\002\001\ufff1\000\020\004\146\005\142\006" +
    "\150\007\141\036\147\042\143\043\151\001\002\000\002" +
    "\001\uffed\000\006\027\173\040\172\001\002\000\020\004" +
    "\146\005\142\006\150\007\141\036\147\042\143\043\151" +
    "\001\002\000\002\001\ufff0\000\002\001\uffee\000\002\001" +
    "\uffdc\000\002\001\uffd7\000\040\011\070\012\071\013\075" +
    "\014\077\015\072\016\074\017\073\020\064\021\100\022" +
    "\066\023\101\025\102\026\065\033\200\051\067\001\002" +
    "\000\002\001\uffa9\000\020\004\057\005\050\006\046\007" +
    "\027\024\036\032\041\047\030\001\002\000\040\011\070" +
    "\012\071\013\075\014\077\015\072\016\074\017\073\020" +
    "\064\021\100\022\066\023\101\025\102\026\065\033\203" +
    "\051\067\001\002\000\034\004\057\005\050\006\046\007" +
    "\027\024\036\027\032\032\041\034\056\047\030\050\037" +
    "\052\040\055\033\056\054\001\002\000\004\053\205\001" +
    "\uffc6\000\034\004\057\005\050\006\046\007\027\024\036" +
    "\027\032\032\041\034\056\047\030\050\037\052\040\055" +
    "\033\056\054\001\002\000\002\001\uffc5\000\002\001\uffd0" +
    "\000\040\011\070\012\071\013\075\014\077\015\072\016" +
    "\074\017\073\020\064\021\100\022\066\023\101\025\102" +
    "\026\065\027\211\051\067\001\002\000\002\001\uffcf\000" +
    "\002\001\uffab\000\020\004\057\005\050\006\046\007\027" +
    "\024\036\032\041\047\030\001\002\000\040\011\070\012" +
    "\071\013\075\014\077\015\072\016\074\017\073\020\064" +
    "\021\100\022\066\023\101\025\102\026\065\033\215\051" +
    "\067\001\002\000\004\054\216\001\002\000\034\004\057" +
    "\005\050\006\046\007\027\024\036\027\032\032\041\034" +
    "\056\047\030\050\037\052\040\055\033\056\054\001\002" +
    "\000\002\001\uffc4\000\002\001\uffc0\000\004\032\222\001" +
    "\002\000\004\004\223\001\002\000\004\031\243\001\002" +
    "\000\006\033\226\040\225\001\002\000\004\004\237\001" +
    "\002\000\004\031\227\001\002\000\010\004\230\030\233" +
    "\046\232\001\002\000\002\001\uffdd\000\004\034\234\001" +
    "\002\000\002\001\uffde\000\002\001\uffdf\000\034\003\014" +
    "\004\044\005\050\006\046\007\027\024\036\027\032\032" +
    "\041\047\030\050\037\052\040\055\033\056\054\001\002" +
    "\000\036\003\014\004\044\005\050\006\046\007\027\024" +
    "\036\027\032\032\041\035\236\047\030\050\037\052\040" +
    "\055\033\056\054\001\002\000\002\001\uffdb\000\004\031" +
    "\240\001\002\000\006\004\241\030\242\001\002\000\002" +
    "\001\ufff5\000\002\001\ufff6\000\006\004\244\030\245\001" +
    "\002\000\002\001\ufff3\000\002\001\ufff4\000\002\001\uffef" +
    "\000\004\031\252\001\002\000\004\027\251\001\002\000" +
    "\002\001\ufff7\000\004\004\223\001\002\000\006\027\254" +
    "\040\225\001\002\000\002\001\ufff8" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\010\002\005\003\003\017\004\001\001\000" +
    "\002\001\001\000\006\012\007\020\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\014\016\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\017\001" +
    "\001\000\002\001\001\000\004\032\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\030\013\050\024" +
    "\042\025\046\026\024\030\023\031\025\033\051\034\044" +
    "\035\052\036\041\040\034\041\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\211\001\001\000\004\031\207\001\001\000\002\001" +
    "\001\000\004\031\176\001\001\000\002\001\001\000\032" +
    "\004\030\013\050\025\175\026\024\030\023\031\025\033" +
    "\051\034\044\035\052\036\041\040\034\041\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\026\054\030\023\031" +
    "\025\033\051\034\044\035\052\036\041\040\034\041\033" +
    "\042\057\001\001\000\002\001\001\000\004\027\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\062\001\001\000\002\001\001\000\004\031" +
    "\117\001\001\000\004\031\116\001\001\000\004\031\115" +
    "\001\001\000\004\031\114\001\001\000\004\031\113\001" +
    "\001\000\004\031\112\001\001\000\004\031\111\001\001" +
    "\000\004\031\110\001\001\000\004\031\107\001\001\000" +
    "\004\031\106\001\001\000\002\001\001\000\004\031\105" +
    "\001\001\000\004\031\104\001\001\000\004\031\103\001" +
    "\001\000\004\031\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\026\121\030\023\031\025\033\051\034\044\035\052\036" +
    "\041\040\034\041\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\125\015\127\031" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\143\007\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\152\006\153\007\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\157\007\144\010\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\156" +
    "\007\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\164\007\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\167\007\144\021\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\173\007\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\201\001\001\000\002\001\001" +
    "\000\026\026\054\030\023\031\025\033\051\034\044\035" +
    "\052\036\041\040\034\041\033\042\203\001\001\000\002" +
    "\001\001\000\026\026\054\030\023\031\025\033\051\034" +
    "\044\035\052\036\041\040\034\041\033\042\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\026\054\030" +
    "\023\031\025\033\051\034\044\035\052\036\041\040\034" +
    "\041\033\042\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\030\013\050\024\234\025\046\026\024\030\023\031\025" +
    "\033\051\034\044\035\052\036\041\040\034\041\033\001" +
    "\001\000\032\004\030\013\050\025\175\026\024\030\023" +
    "\031\025\033\051\034\044\035\052\036\041\040\034\041" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\252\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$QCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$QCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$QCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public String section = "main";
public void syntax_error(Symbol cur_token) {
report_error("Syntax error at line " + (cur_token.left+1) +
", column " + cur_token.right + " at section " + section, cur_token);
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$QCup$actions {
  private final QCup parser;

  /** Constructor */
  CUP$QCup$actions(QCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$QCup$do_action(
    int                        CUP$QCup$act_num,
    java_cup.runtime.lr_parser CUP$QCup$parser,
    java.util.Stack            CUP$QCup$stack,
    int                        CUP$QCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$QCup$result;

      /* select the action based on the action number */
      switch (CUP$QCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exprOptional ::= expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("exprOptional",29, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exprOptional ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("exprOptional",29, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr IN expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= NOT expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= expr AND expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= expr OR expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= expr GREATEROREQ expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= expr GREATER expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr LESSOREQ expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr LESS expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr NOTEQ expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr EQCOMP expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr POWER expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr DIVIDE expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr TIMES expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= FLOAT 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= INT 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= BOOL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= ID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= TEST 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // emptyStatement ::= SEMI 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("emptyStatement",31, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // repeatUntilStatement ::= REPEAT blockStatement UNTIL LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("repeatUntilStatement",28, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statementNoFollowingSubstatement ::= expr SEMI 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statementNoFollowingSubstatement",30, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statementNoFollowingSubstatement ::= repeatUntilStatement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statementNoFollowingSubstatement",30, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statementNoFollowingSubstatement ::= returnStatement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statementNoFollowingSubstatement",30, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statementNoFollowingSubstatement ::= emptyStatement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statementNoFollowingSubstatement",30, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // whileDoStatement ::= WHILE LPAREN expr RPAREN DO blockStatement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("whileDoStatement",27, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ifThenElseStatement ::= IF LPAREN expr RPAREN blockStatement ELSE blockStatement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("ifThenElseStatement",26, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ifThenStatement ::= IF LPAREN expr RPAREN blockStatement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("ifThenStatement",25, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // blockStatement ::= statement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("blockStatement",32, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // blockStatement ::= LBRACE statementList RBRACE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("blockStatement",32, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= whileDoStatement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= ifThenElseStatement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= ifThenStatement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= statementNoFollowingSubstatement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statementList ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statementList",21, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statementList ::= statementList statement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("statementList",21, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // returnStatement ::= RETURN expr SEMI 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("returnStatement",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // returnStatement ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("returnStatement",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // fcall ::= ID LPAREN parametersOptional RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fcall",9, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parameters ::= parameters COMMA expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameters ::= expr 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametersOptional ::= parameters 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parametersOptional",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametersOptional ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("parametersOptional",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fbody ::= fbodyblock 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fbody",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fbody ::= fbody fbodyblock 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fbody",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // fbodyblock ::= fcall 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fbodyblock",19, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // fbodyblock ::= statement 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fbodyblock",19, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fbodyblock ::= variableDecl 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fbodyblock",19, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // functionDecl ::= FDEF ID LPAREN fieldDecl RPAREN COLON type_specifier LBRACE fbody RBRACE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("functionDecl",17, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-9)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // mainFunction ::= MAIN LBRACE fbody RBRACE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainFunction",24, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_specifier ::= ID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_specifier ::= VOID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_specifier ::= TYPE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simpleInit ::= CHAR 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("simpleInit",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simpleInit ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("simpleInit",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simpleInit ::= FLOAT 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("simpleInit",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // simpleInit ::= INT 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("simpleInit",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // simpleInit ::= BOOL 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("simpleInit",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // list ::= initalisation 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("list",4, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // list ::= list COMMA initalisation 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("list",4, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tuple ::= initalisation 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("tuple",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tuple ::= tuple COMMA initalisation 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("tuple",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // initalisation ::= ID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("initalisation",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // initalisation ::= simpleInit 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("initalisation",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // initalisation ::= LSQPAREN list RSQPAREN 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("initalisation",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // initalisation ::= LSQPAREN PIPE tuple PIPE RSQPAREN 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("initalisation",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // newDT ::= initalisation 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("newDT",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // newDT ::= newDT COMMA initalisation 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("newDT",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variableDecl ::= error SEMI 
            {
              Object RESULT =null;
		 System.err.println("Invalid variable declaration"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("variableDecl",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variableDecl ::= ID COLON ID EQ newDT SEMI 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("variableDecl",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variableDecl ::= ID COLON TYPE EQ initalisation SEMI 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("variableDecl",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variableDecl ::= ID COLON TYPE SEMI 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("variableDecl",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fieldDecl ::= ID COLON ID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fieldDecl",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fieldDecl ::= ID COLON TYPE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fieldDecl",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fieldDecl ::= fieldDecl COMMA ID COLON ID 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fieldDecl",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fieldDecl ::= fieldDecl COMMA ID COLON TYPE 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fieldDecl",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // typeDecl ::= TDEF error SEMI 
            {
              Object RESULT =null;
		 System.err.println("Invalid type declaration"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("typeDecl",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // typeDecl ::= TDEF ID COLON fieldDecl SEMI 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("typeDecl",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variableDeclList ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("variableDeclList",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variableDeclList ::= variableDeclList variableDecl 
            {
              Object RESULT =null;
		 parser.section = "Variable Declaration"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("variableDeclList",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // typeDeclList ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("typeDeclList",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // typeDeclList ::= typeDeclList typeDecl 
            {
              Object RESULT =null;
		 parser.section = "Type Declaration"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("typeDeclList",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // functionDeclList ::= 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("functionDeclList",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // functionDeclList ::= functionDeclList functionDecl mainFunction 
            {
              Object RESULT =null;
		 parser.section = "Function Declaration"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("functionDeclList",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // grammar ::= typeDeclList variableDeclList functionDeclList 
            {
              Object RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("grammar",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		RESULT = start_val;
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$QCup$parser.done_parsing();
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= grammar 
            {
              Object RESULT =null;
		 System.out.println("========end parsing=========="); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

