
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 21 13:20:06 CEST 2013
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;
import java.util.ArrayList;
import java.util.Hashtable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 21 13:20:06 CEST 2013
  */
public class QCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public QCup() {super();}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public QCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\002\000\002\003\005\000" +
    "\002\011\007\000\002\011\005\000\002\010\006\000\002" +
    "\010\010\000\002\010\006\000\002\005\003\000\002\005" +
    "\003\000\002\005\005\000\002\007\014\000\002\006\014" +
    "\000\002\012\005\000\002\012\005\000\002\014\003\000" +
    "\002\014\002\000\002\013\007\000\002\013\005\000\002" +
    "\031\005\000\002\031\003\000\002\004\003\000\002\004" +
    "\003\000\002\017\004\000\002\017\004\000\002\017\002" +
    "\000\002\015\004\000\002\015\004\000\002\015\002\000" +
    "\002\032\003\000\002\032\002\000\002\027\006\000\002" +
    "\024\003\000\002\024\007\000\002\024\005\000\002\024" +
    "\011\000\002\024\010\000\002\024\005\000\002\022\003" +
    "\000\002\022\007\000\002\022\005\000\002\022\011\000" +
    "\002\022\010\000\002\022\005\000\002\016\005\000\002" +
    "\016\004\000\002\020\005\000\002\020\004\000\002\023" +
    "\003\000\002\023\003\000\002\023\010\000\002\023\004" +
    "\000\002\023\005\000\002\025\003\000\002\025\010\000" +
    "\002\025\004\000\002\025\005\000\002\021\004\000\002" +
    "\021\005\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\006\000\002\026\006\000\002\026\010\000" +
    "\002\026\007\000\002\026\007\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\004\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\004\000\002\026\005\000\002\026\005" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\002\001\ufffa\000\014\003\017\004\016\037" +
    "\007\046\021\047\014\001\002\000\004\002\006\001\002" +
    "\000\002\001\000\000\004\003\263\001\uffe2\000\002\001" +
    "\ufffb\000\002\001\ufffc\000\002\001\ufffd\000\002\001\ufff2" +
    "\000\006\003\172\004\171\001\002\000\004\002\001\001" +
    "\ufffe\000\004\034\042\001\002\000\004\040\041\001\uffff" +
    "\000\002\001\ufff3\000\006\003\023\004\022\001\002\000" +
    "\004\034\025\001\002\000\004\033\024\001\002\000\002" +
    "\001\ufff7\000\004\004\026\001\002\000\004\034\037\001" +
    "\002\000\006\033\031\043\030\001\002\000\004\004\032" +
    "\001\002\000\002\001\ufff8\000\004\034\033\001\002\000" +
    "\006\004\034\005\036\001\002\000\002\001\uffe5\000\002" +
    "\001\uffea\000\002\001\uffe6\000\006\004\034\005\036\001" +
    "\002\000\002\001\uffe9\000\002\001\ufff9\000\010\003\043" +
    "\004\034\005\036\001\002\000\004\033\170\001\002\000" +
    "\006\014\045\033\046\001\002\000\030\004\055\007\052" +
    "\010\064\011\047\012\054\013\065\030\056\035\063\041" +
    "\057\044\051\061\062\001\002\000\002\001\ufff6\000\004" +
    "\011\167\001\uff9f\000\002\001\uffbe\000\004\035\164\001" +
    "\002\000\002\001\uffa0\000\006\033\163\043\147\001\002" +
    "\000\002\001\uff9d\000\006\003\156\035\157\001\uffc0\000" +
    "\030\004\055\007\052\010\064\011\047\012\054\013\065" +
    "\030\056\035\063\041\057\044\051\061\062\001\002\000" +
    "\030\004\055\007\052\010\064\011\047\012\054\013\065" +
    "\030\056\035\063\041\057\044\051\061\062\001\uffdd\000" +
    "\046\014\106\015\073\016\110\017\107\020\103\021\100" +
    "\022\070\023\072\024\104\025\067\026\101\027\111\031" +
    "\074\032\071\041\102\045\105\051\076\060\077\001\uffe7" +
    "\000\004\003\151\001\uffbf\000\030\004\055\007\052\010" +
    "\064\011\047\012\054\013\065\030\056\035\063\041\057" +
    "\044\051\061\062\001\uffdd\000\030\004\055\007\052\010" +
    "\064\011\047\012\054\013\065\030\056\035\063\041\057" +
    "\044\051\061\062\001\002\000\002\001\uff9e\000\002\001" +
    "\uff9c\000\050\014\106\015\073\016\110\017\107\020\103" +
    "\021\100\022\070\023\072\024\104\025\067\026\101\027" +
    "\111\031\074\032\071\036\075\041\102\045\105\051\076" +
    "\060\077\001\002\000\030\004\055\007\052\010\064\011" +
    "\047\012\054\013\065\030\056\035\063\041\057\044\051" +
    "\061\062\001\002\000\030\004\055\007\052\010\064\011" +
    "\047\012\054\013\065\030\056\035\063\041\057\044\051" +
    "\061\062\001\002\000\030\004\055\007\052\010\064\011" +
    "\047\012\054\013\065\030\056\035\063\041\057\044\051" +
    "\061\062\001\002\000\030\004\055\007\052\010\064\011" +
    "\047\012\054\013\065\030\056\035\063\041\057\044\051" +
    "\061\062\001\002\000\030\004\055\007\052\010\064\011" +
    "\047\012\054\013\065\030\056\035\063\041\057\044\051" +
    "\061\062\001\002\000\030\004\055\007\052\010\064\011" +
    "\047\012\054\013\065\030\056\035\063\041\057\044\051" +
    "\061\062\001\002\000\002\001\uffa6\000\030\004\055\007" +
    "\052\010\064\011\047\012\054\013\065\030\056\035\063" +
    "\041\057\044\051\061\062\001\002\000\030\004\055\007" +
    "\052\010\064\011\047\012\054\013\065\030\056\035\063" +
    "\041\057\044\051\061\062\001\002\000\030\004\055\007" +
    "\052\010\064\011\047\012\054\013\065\030\056\035\063" +
    "\041\057\044\051\061\062\001\002\000\030\004\055\007" +
    "\052\010\064\011\047\012\054\013\065\030\056\035\063" +
    "\041\057\044\051\061\062\001\002\000\032\004\055\007" +
    "\052\010\064\011\047\012\054\013\065\030\056\034\121" +
    "\035\063\041\057\044\051\061\062\001\002\000\030\004" +
    "\055\007\052\010\064\011\047\012\054\013\065\030\056" +
    "\035\063\041\057\044\051\061\062\001\002\000\030\004" +
    "\055\007\052\010\064\011\047\012\054\013\065\030\056" +
    "\035\063\041\057\044\051\061\062\001\002\000\030\004" +
    "\055\007\052\010\064\011\047\012\054\013\065\030\056" +
    "\035\063\041\057\044\051\061\062\001\002\000\030\004" +
    "\055\007\052\010\064\011\047\012\054\013\065\030\056" +
    "\035\063\041\057\044\051\061\062\001\002\000\030\004" +
    "\055\007\052\010\064\011\047\012\054\013\065\030\056" +
    "\035\063\041\057\044\051\061\062\001\002\000\030\004" +
    "\055\007\052\010\064\011\047\012\054\013\065\030\056" +
    "\035\063\041\057\044\051\061\062\001\002\000\030\004" +
    "\055\007\052\010\064\011\047\012\054\013\065\030\056" +
    "\035\063\041\057\044\051\061\062\001\002\000\010\027" +
    "\111\045\105\060\077\001\uffb1\000\020\023\072\024\104" +
    "\025\067\026\101\027\111\045\105\060\077\001\uffb0\000" +
    "\020\023\072\024\104\025\067\026\101\027\111\045\105" +
    "\060\077\001\uffae\000\040\016\110\017\107\020\103\021" +
    "\100\022\070\023\072\024\104\025\067\026\101\027\111" +
    "\031\074\032\071\045\105\051\076\060\077\001\uffbc\000" +
    "\002\001\uffbd\000\014\025\067\026\101\027\111\045\105" +
    "\060\077\001\uffb4\000\020\023\072\024\104\025\067\026" +
    "\101\027\111\045\105\060\077\001\uffad\000\030\004\055" +
    "\007\052\010\064\011\047\012\054\013\065\030\056\035" +
    "\063\041\057\044\051\061\062\001\002\000\052\014\106" +
    "\015\073\016\110\017\107\020\103\021\100\022\070\023" +
    "\072\024\104\025\067\026\101\027\111\031\074\032\071" +
    "\034\123\041\102\042\124\045\105\051\076\060\077\001" +
    "\002\000\032\004\055\007\052\010\064\011\047\012\054" +
    "\013\065\030\056\035\063\041\057\042\125\044\051\061" +
    "\062\001\002\000\002\001\uffb9\000\002\001\uffb6\000\050" +
    "\014\106\015\073\016\110\017\107\020\103\021\100\022" +
    "\070\023\072\024\104\025\067\026\101\027\111\031\074" +
    "\032\071\041\102\042\127\045\105\051\076\060\077\001" +
    "\002\000\002\001\uffb8\000\050\014\106\015\073\016\110" +
    "\017\107\020\103\021\100\022\070\023\072\024\104\025" +
    "\067\026\101\027\111\031\074\032\071\041\102\042\131" +
    "\045\105\051\076\060\077\001\002\000\002\001\uffb7\000" +
    "\010\027\111\045\105\060\077\001\uffb2\000\020\023\072" +
    "\024\104\025\067\026\101\027\111\045\105\060\077\001" +
    "\uffac\000\002\001\uffbb\000\020\023\072\024\104\025\067" +
    "\026\101\027\111\045\105\060\077\001\uffa7\000\034\016" +
    "\110\017\107\020\103\021\100\022\070\023\072\024\104" +
    "\025\067\026\101\027\111\045\105\051\076\060\077\001" +
    "\uffaa\000\040\016\110\017\107\020\103\021\100\022\070" +
    "\023\072\024\104\025\067\026\101\027\111\031\074\032" +
    "\071\045\105\051\076\060\077\001\uffaf\000\014\025\067" +
    "\026\101\027\111\045\105\060\077\001\uffb5\000\034\016" +
    "\110\017\107\020\103\021\100\022\070\023\072\024\104" +
    "\025\067\026\101\027\111\045\105\051\076\060\077\001" +
    "\uffa9\000\020\023\072\024\104\025\067\026\101\027\111" +
    "\045\105\060\077\001\uffab\000\010\027\111\045\105\060" +
    "\077\001\uffb3\000\004\043\147\001\uffde\000\004\062\146" +
    "\001\002\000\002\001\uffa5\000\030\004\055\007\052\010" +
    "\064\011\047\012\054\013\065\030\056\035\063\041\057" +
    "\044\051\061\062\001\002\000\046\014\106\015\073\016" +
    "\110\017\107\020\103\021\100\022\070\023\072\024\104" +
    "\025\067\026\101\027\111\031\074\032\071\041\102\045" +
    "\105\051\076\060\077\001\uffe8\000\004\033\152\001\002" +
    "\000\002\001\uffa1\000\004\042\154\001\002\000\002\001" +
    "\uffa4\000\006\045\105\060\077\001\uffa8\000\004\033\162" +
    "\001\002\000\030\004\055\007\052\010\064\011\047\012" +
    "\054\013\065\030\056\035\063\041\057\044\051\061\062" +
    "\001\uffdd\000\004\036\161\001\002\000\002\001\uffdc\000" +
    "\002\001\uffa2\000\002\001\ufff5\000\030\004\055\007\052" +
    "\010\064\011\047\012\054\013\065\030\056\035\063\041" +
    "\057\044\051\061\062\001\002\000\050\014\106\015\073" +
    "\016\110\017\107\020\103\021\100\022\070\023\072\024" +
    "\104\025\067\026\101\027\111\031\074\032\071\036\166" +
    "\041\102\045\105\051\076\060\077\001\002\000\002\001" +
    "\uffba\000\002\001\uffa3\000\002\001\ufff4\000\004\035\174" +
    "\001\002\000\004\040\173\001\002\000\002\001\ufff1\000" +
    "\004\004\026\001\uffeb\000\004\036\177\001\002\000\004" +
    "\043\030\001\uffec\000\004\034\200\001\002\000\010\004" +
    "\034\005\036\006\201\001\002\000\004\037\260\001\002" +
    "\000\004\037\203\001\002\000\002\001\uffdf\000\044\004" +
    "\214\007\052\010\064\011\047\012\054\013\065\030\056" +
    "\033\210\035\063\040\206\041\057\044\051\050\212\052" +
    "\213\055\211\056\220\061\062\001\002\000\050\014\106" +
    "\015\073\016\110\017\107\020\103\021\100\022\070\023" +
    "\072\024\104\025\067\026\101\027\111\031\074\032\071" +
    "\033\257\041\102\045\105\051\076\060\077\001\002\000" +
    "\002\001\ufff0\000\002\001\uffe1\000\002\001\uffcb\000\006" +
    "\003\250\035\251\001\002\000\032\004\055\007\052\010" +
    "\064\011\047\012\054\013\065\030\056\033\245\035\063" +
    "\041\057\044\051\061\062\001\002\000\006\003\233\035" +
    "\234\001\002\000\010\003\156\034\042\035\157\001\uffc0" +
    "\000\002\001\uffd5\000\002\001\uffe0\000\002\001\uffca\000" +
    "\006\003\222\037\221\001\002\000\002\001\uffdf\000\004" +
    "\033\230\001\002\000\004\057\224\001\002\000\004\035" +
    "\225\001\002\000\030\004\055\007\052\010\064\011\047" +
    "\012\054\013\065\030\056\035\063\041\057\044\051\061" +
    "\062\001\002\000\050\014\106\015\073\016\110\017\107" +
    "\020\103\021\100\022\070\023\072\024\104\025\067\026" +
    "\101\027\111\031\074\032\071\036\227\041\102\045\105" +
    "\051\076\060\077\001\002\000\002\001\uffc9\000\004\057" +
    "\uffce\001\uffc7\000\044\004\214\007\052\010\064\011\047" +
    "\012\054\013\065\030\056\033\210\035\063\040\232\041" +
    "\057\044\051\050\212\052\213\055\211\056\220\061\062" +
    "\001\002\000\002\001\uffcf\000\004\040\244\001\002\000" +
    "\030\004\055\007\052\010\064\011\047\012\054\013\065" +
    "\030\056\035\063\041\057\044\051\061\062\001\002\000" +
    "\050\014\106\015\073\016\110\017\107\020\103\021\100" +
    "\022\070\023\072\024\104\025\067\026\101\027\111\031" +
    "\074\032\071\036\236\041\102\045\105\051\076\060\077" +
    "\001\002\000\006\003\237\037\221\001\002\000\004\033" +
    "\243\001\002\000\004\053\241\001\uffd4\000\006\003\237" +
    "\037\221\001\002\000\002\001\uffd2\000\002\001\uffce\000" +
    "\002\001\uffd3\000\002\001\uffc2\000\050\014\106\015\073" +
    "\016\110\017\107\020\103\021\100\022\070\023\072\024" +
    "\104\025\067\026\101\027\111\031\074\032\071\033\247" +
    "\041\102\045\105\051\076\060\077\001\002\000\002\001" +
    "\uffc1\000\004\040\256\001\002\000\030\004\055\007\052" +
    "\010\064\011\047\012\054\013\065\030\056\035\063\041" +
    "\057\044\051\061\062\001\002\000\050\014\106\015\073" +
    "\016\110\017\107\020\103\021\100\022\070\023\072\024" +
    "\104\025\067\026\101\027\111\031\074\032\071\036\253" +
    "\041\102\045\105\051\076\060\077\001\002\000\004\054" +
    "\254\001\002\000\006\003\237\037\221\001\002\000\002" +
    "\001\uffd1\000\002\001\uffd0\000\002\001\uffc8\000\002\001" +
    "\uffdf\000\044\004\214\007\052\010\064\011\047\012\054" +
    "\013\065\030\056\033\210\035\063\040\262\041\057\044" +
    "\051\050\212\052\213\055\211\056\220\061\062\001\002" +
    "\000\002\001\uffef\000\004\040\332\001\002\000\042\004" +
    "\214\007\052\010\064\011\047\012\054\013\065\030\056" +
    "\033\270\035\063\040\266\041\057\044\051\052\273\055" +
    "\271\056\275\061\062\001\002\000\050\014\106\015\073" +
    "\016\110\017\107\020\103\021\100\022\070\023\072\024" +
    "\104\025\067\026\101\027\111\031\074\032\071\033\331" +
    "\041\102\045\105\051\076\060\077\001\002\000\002\001" +
    "\uffee\000\002\001\uffe4\000\002\001\uffc6\000\006\003\322" +
    "\035\323\001\002\000\002\001\uffdb\000\006\003\310\035" +
    "\311\001\002\000\002\001\uffe3\000\006\003\277\037\276" +
    "\001\002\000\002\001\uffe2\000\004\033\305\001\002\000" +
    "\004\057\301\001\002\000\004\035\302\001\002\000\030" +
    "\004\055\007\052\010\064\011\047\012\054\013\065\030" +
    "\056\035\063\041\057\044\051\061\062\001\002\000\050" +
    "\014\106\015\073\016\110\017\107\020\103\021\100\022" +
    "\070\023\072\024\104\025\067\026\101\027\111\031\074" +
    "\032\071\036\304\041\102\045\105\051\076\060\077\001" +
    "\002\000\002\001\uffc5\000\004\057\uffcc\001\uffc3\000\042" +
    "\004\214\007\052\010\064\011\047\012\054\013\065\030" +
    "\056\033\270\035\063\040\307\041\057\044\051\052\273" +
    "\055\271\056\275\061\062\001\002\000\002\001\uffcd\000" +
    "\004\040\321\001\002\000\030\004\055\007\052\010\064" +
    "\011\047\012\054\013\065\030\056\035\063\041\057\044" +
    "\051\061\062\001\002\000\050\014\106\015\073\016\110" +
    "\017\107\020\103\021\100\022\070\023\072\024\104\025" +
    "\067\026\101\027\111\031\074\032\071\036\313\041\102" +
    "\045\105\051\076\060\077\001\002\000\006\003\314\037" +
    "\276\001\002\000\004\033\320\001\002\000\004\053\316" +
    "\001\uffda\000\006\003\314\037\276\001\002\000\002\001" +
    "\uffd8\000\002\001\uffcc\000\002\001\uffd9\000\004\040\330" +
    "\001\002\000\030\004\055\007\052\010\064\011\047\012" +
    "\054\013\065\030\056\035\063\041\057\044\051\061\062" +
    "\001\002\000\050\014\106\015\073\016\110\017\107\020" +
    "\103\021\100\022\070\023\072\024\104\025\067\026\101" +
    "\027\111\031\074\032\071\036\325\041\102\045\105\051" +
    "\076\060\077\001\002\000\004\054\326\001\002\000\006" +
    "\003\314\037\276\001\002\000\002\001\uffd7\000\002\001" +
    "\uffd6\000\002\001\uffc4\000\002\001\uffed" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\330\000\006\002\004\003\003\001\001\000\016\005" +
    "\007\006\017\007\012\010\010\011\011\012\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\026\057\027" +
    "\047\030\060\031\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\026\154\027\047\030\060\001\001\000\014\026" +
    "\057\027\047\030\060\031\143\032\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\026\057\027\047\030" +
    "\060\031\143\032\144\001\001\000\010\026\065\027\047" +
    "\030\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\142\027\047\030\060\001\001" +
    "\000\010\026\141\027\047\030\060\001\001\000\010\026" +
    "\140\027\047\030\060\001\001\000\010\026\137\027\047" +
    "\030\060\001\001\000\010\026\136\027\047\030\060\001" +
    "\001\000\010\026\135\027\047\030\060\001\001\000\002" +
    "\001\001\000\010\026\134\027\047\030\060\001\001\000" +
    "\010\026\133\027\047\030\060\001\001\000\010\026\132" +
    "\027\047\030\060\001\001\000\010\026\131\027\047\030" +
    "\060\001\001\000\010\026\121\027\047\030\060\001\001" +
    "\000\010\026\117\027\047\030\060\001\001\000\010\026" +
    "\116\027\047\030\060\001\001\000\010\026\115\027\047" +
    "\030\060\001\001\000\010\026\114\027\047\030\060\001" +
    "\001\000\010\026\113\027\047\030\060\001\001\000\010" +
    "\026\112\027\047\030\060\001\001\000\010\026\111\027" +
    "\047\030\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\127\027\047" +
    "\030\060\001\001\000\002\001\001\000\010\026\125\027" +
    "\047\030\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\147\027\047\030\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\026\057\027\047\030\060\031\143\032" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\026\164\027\047\030" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\175\014\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\203\001\001\000\020\010\206\021\216\022" +
    "\215\023\214\026\204\027\047\030\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\245\027\047\030\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\222" +
    "\001\001\000\004\015\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\225\027\047" +
    "\030\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\206\021\216\022\215\023\214" +
    "\026\204\027\047\030\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\234\027\047\030\060\001\001" +
    "\000\002\001\001\000\004\016\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\026\251\027\047\030\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\260\001\001\000\020\010\206\021\216\022\215\023\214" +
    "\026\204\027\047\030\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\266\024\273\025\271\026\264" +
    "\027\047\030\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\277\001\001\000\004\017\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\302\027\047\030\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\266\024\273\025" +
    "\271\026\264\027\047\030\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\026\311\027\047\030\060\001" +
    "\001\000\002\001\001\000\004\020\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\323\027\047\030\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$QCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$QCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$QCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public static String section = "Main Body Declaration"; 
public static int numOfErrors = 0;
public static int numOfMains = 0;

public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
}

public void syntax_error(Symbol cur_token) {
    numOfErrors++;
    report_error("Syntax error at line " + (cur_token.left+1) +
   ", column " + (cur_token.right+1) + " at section " + QCup.section , cur_token);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$QCup$actions {
  private final QCup parser;

  /** Constructor */
  CUP$QCup$actions(QCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$QCup$do_action(
    int                        CUP$QCup$act_num,
    java_cup.runtime.lr_parser CUP$QCup$parser,
    java.util.Stack            CUP$QCup$stack,
    int                        CUP$QCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$QCup$result;

      /* select the action based on the action number */
      switch (CUP$QCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // value ::= CHAR 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new CharValueExpr(c); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // value ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new StrValueExpr(s); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // value ::= FLOAT 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new FloatValueExpr(f); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // value ::= INT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new IntValueExpr(i); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // value ::= BOOL 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new BoolValueExpr(b); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("value",22, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= value error SEMI 
            {
              Expr RESULT =null;
		 System.err.println("Invalid expression"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= ID error SEMI 
            {
              Expr RESULT =null;
		 System.err.println("Invalid expression"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= INT INT 
            {
              Expr RESULT =null;
		 parser.numOfErrors++; System.err.println("Cannot have two adjacent numbers with no operator in between.\n"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= LSQPAREN sequenceOptional RSQPAREN 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Expr> s = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new SeqExpr(s, "list"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= LTUPLE sequenceOptional RTUPLE 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Expr> s = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new SeqExpr(s, "tuple"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = e; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= expr IN expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new InExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new NotUnaryExpr(e); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new AndExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new OrExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= expr GREATEROREQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new GreaterOrEqExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= expr GREATER expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new GreaterCompBinaryExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= expr LESSOREQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new LessEqCompBinaryExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= expr LESS expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new LessCompBinaryExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= expr NOTEQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new NotEqCompBinaryExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr EQCOMP expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new EqCompBinaryExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr POWER expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new PowerBinaryExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr DIVIDE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new DivideBinaryExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr TIMES expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new TimesBinaryExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new MinusBinaryExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new PlusBinaryExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr LSQPAREN expr COLON RSQPAREN 
            {
              Expr RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		Expr seq = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		 RESULT = new SeqSlicingExpr(seq, s, null); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr LSQPAREN COLON expr RSQPAREN 
            {
              Expr RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		Expr seq = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new SeqSlicingExpr(seq, null, f); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr LSQPAREN expr COLON expr RSQPAREN 
            {
              Expr RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).right;
		Expr seq = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new SeqSlicingExpr(seq, s, f); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr LSQPAREN expr RSQPAREN 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new SeqCallExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= LEN LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Expr seq = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 ArrayList<Expr> a = new ArrayList<Expr>();
                        a.add(seq);
                        RESULT = new FcallExpr("len", a); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr CONCAT expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new ConcatBinaryExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr EQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new EqBinaryExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr DOT expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new DotBinaryExpr(l, r); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= fcall 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = f; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= value 
            {
              Expr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = v; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new VarExpr(id); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // returnStmt ::= RETURN expr SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new ReturnStmt(e); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("returnStmt",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // returnStmt ::= RETURN SEMI 
            {
              Stmt RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("returnStmt",15, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // mainStmtNoFollowingSubstmt ::= REPEAT error SEMI 
            {
              Stmt RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainStmtNoFollowingSubstmt",19, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // mainStmtNoFollowingSubstmt ::= expr SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new ExprStmt(e); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainStmtNoFollowingSubstmt",19, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // mainStmtNoFollowingSubstmt ::= REPEAT mainBlockStmt UNTIL LPAREN expr RPAREN 
            {
              Stmt RESULT =null;
		int mbleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int mbright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		ArrayList<Stmt> mb = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new RepeatUntilStmt(e, mb); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainStmtNoFollowingSubstmt",19, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // mainStmtNoFollowingSubstmt ::= SEMI 
            {
              Stmt RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainStmtNoFollowingSubstmt",19, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funcStmtNoFollowingSubstmt ::= REPEAT error SEMI 
            {
              Stmt RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcStmtNoFollowingSubstmt",17, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funcStmtNoFollowingSubstmt ::= expr SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new ExprStmt(e); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcStmtNoFollowingSubstmt",17, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // funcStmtNoFollowingSubstmt ::= REPEAT funcBlockStmt UNTIL LPAREN expr RPAREN 
            {
              Stmt RESULT =null;
		int fbleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		ArrayList<Stmt> fb = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new RepeatUntilStmt(e, fb); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcStmtNoFollowingSubstmt",17, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funcStmtNoFollowingSubstmt ::= returnStmt 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Stmt r = (Stmt)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = r; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcStmtNoFollowingSubstmt",17, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funcStmtNoFollowingSubstmt ::= SEMI 
            {
              Stmt RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcStmtNoFollowingSubstmt",17, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mainBlockStmt ::= error SEMI 
            {
              ArrayList<Stmt> RESULT =null;
		 System.err.println("Braces are neccessary"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainBlockStmt",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // mainBlockStmt ::= LBRACE mainStmtList RBRACE 
            {
              ArrayList<Stmt> RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Stmt> ms = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 ArrayList<Stmt> a = new ArrayList<Stmt>();
						   a = ms;
						   RESULT = a;
					    
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainBlockStmt",14, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // funcBlockStmt ::= error SEMI 
            {
              ArrayList<Stmt> RESULT =null;
		 System.err.println("Braces are neccessary"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcBlockStmt",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // funcBlockStmt ::= LBRACE funcStmtList RBRACE 
            {
              ArrayList<Stmt> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Stmt> fs = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 ArrayList<Stmt> a = new ArrayList<Stmt>();
						   a = fs;
						   RESULT = a;
					    
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcBlockStmt",12, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // funcStmt ::= WHILE error RBRACE 
            {
              Stmt RESULT =null;
		 System.err.println("Invalid while statement"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcStmt",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // funcStmt ::= WHILE LPAREN expr RPAREN DO funcBlockStmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ArrayList<Stmt> b = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new WhileStmt(e, b); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcStmt",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // funcStmt ::= IF LPAREN expr RPAREN funcBlockStmt ELSE funcBlockStmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int ibleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ArrayList<Stmt> ib = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ArrayList<Stmt> eb = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new IfElseStmt(e, ib, eb); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcStmt",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // funcStmt ::= IF error RBRACE 
            {
              Stmt RESULT =null;
		 System.err.println("Invalid if statement"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcStmt",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funcStmt ::= IF LPAREN expr RPAREN funcBlockStmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ArrayList<Stmt> b = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new IfStmt(e, b); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcStmt",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funcStmt ::= funcStmtNoFollowingSubstmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = s; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcStmt",16, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mainStmt ::= WHILE error RBRACE 
            {
              Stmt RESULT =null;
		 System.err.println("Invalid while statement"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainStmt",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mainStmt ::= WHILE LPAREN expr RPAREN DO mainBlockStmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ArrayList<Stmt> b = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new WhileStmt(e, b); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainStmt",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mainStmt ::= IF LPAREN expr RPAREN mainBlockStmt ELSE mainBlockStmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int ibleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ArrayList<Stmt> ib = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ArrayList<Stmt> eb = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new IfElseStmt(e, ib, eb); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainStmt",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // mainStmt ::= IF error RBRACE 
            {
              Stmt RESULT =null;
		 System.err.println("Invalid if statement"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainStmt",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mainStmt ::= IF LPAREN expr RPAREN mainBlockStmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ArrayList<Stmt> b = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = new IfStmt(e, b); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainStmt",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mainStmt ::= mainStmtNoFollowingSubstmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = s; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainStmt",18, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fcall ::= ID LPAREN sequenceOptional RPAREN 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Expr> seq = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new FcallExpr(id, seq); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fcall",21, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sequenceOptional ::= 
            {
              ArrayList<Expr> RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("sequenceOptional",24, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sequenceOptional ::= sequence 
            {
              ArrayList<Expr> RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ArrayList<Expr> seq = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = seq; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("sequenceOptional",24, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcStmtList ::= 
            {
              ArrayList<Stmt> RESULT =null;
		
                    	RESULT = new ArrayList<Stmt>();
                    	
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcStmtList",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcStmtList ::= funcStmtList funcStmt 
            {
              ArrayList<Stmt> RESULT =null;
		int fslleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int fslright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Stmt> fsl = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Stmt fs = (Stmt)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		
						fsl.add(fs);							 
						RESULT = fsl;
						
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcStmtList",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcStmtList ::= funcStmtList variableDecl 
            {
              ArrayList<Stmt> RESULT =null;
		int fslleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int fslright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Stmt> fsl = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Decl vd = (Decl)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 
						  fsl.add(new VarStmt(vd));
						  RESULT = fsl;
						
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("funcStmtList",11, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mainStmtList ::= 
            {
              ArrayList<Stmt> RESULT =null;
		
                    	RESULT = new ArrayList<Stmt>();
                    	
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainStmtList",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mainStmtList ::= mainStmtList mainStmt 
            {
              ArrayList<Stmt> RESULT =null;
		int mslleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int mslright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Stmt> msl = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Stmt ms = (Stmt)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		
						msl.add(ms);							 
						RESULT = msl;
						
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainStmtList",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // mainStmtList ::= mainStmtList variableDecl 
            {
              ArrayList<Stmt> RESULT =null;
		int mslleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int mslright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Stmt> msl = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Decl vd = (Decl)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 
						msl.add(new VarStmt(vd));
						  RESULT = msl;
						
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainStmtList",13, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typeSpecifier ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = id; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("typeSpecifier",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // typeSpecifier ::= TYPE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = t; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("typeSpecifier",2, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sequence ::= expr 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 
						ArrayList<Expr> a = new ArrayList<Expr>();
						a.add(e);
                        RESULT = a;
                        
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("sequence",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sequence ::= sequence COMMA expr 
            {
              ArrayList<Expr> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		ArrayList<Expr> s = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		
						s.add(e);
						RESULT = s;
						
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("sequence",23, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fieldDecl ::= ID COLON typeSpecifier 
            {
              ArrayList<Field> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		
                        ArrayList<Field> a = new ArrayList<Field>();
                        a.add(new Field(id, type));
                        RESULT = a;
                        
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fieldDecl",9, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fieldDecl ::= fieldDecl COMMA ID COLON typeSpecifier 
            {
              ArrayList<Field> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)).right;
		ArrayList<Field> f = (ArrayList<Field>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 
						f.add(new Field(id, type));
						RESULT = f;
						
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fieldDecl",9, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fieldDeclOptional ::= 
            {
              ArrayList<Field> RESULT =null;

              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fieldDeclOptional",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fieldDeclOptional ::= fieldDecl 
            {
              ArrayList<Field> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		ArrayList<Field> f = (ArrayList<Field>)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = f; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("fieldDeclOptional",10, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // mainDecl ::= LBRACE error RBRACE 
            {
              MainDecl RESULT =null;
		 System.err.println("Invalid main body"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainDecl",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mainDecl ::= LBRACE mainStmtList RBRACE 
            {
              MainDecl RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Stmt> s = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 
                        //AST
                        RESULT = new MainDecl(s);
                        
                        //Error
                        if(parser.numOfMains > 1){ parser.numOfErrors ++; }
                               else parser.numOfMains ++; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("mainDecl",8, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // functionDeclVoid ::= FDEF ID LPAREN fieldDeclOptional RPAREN COLON VOID LBRACE funcStmtList RBRACE 
            {
              Decl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-8)).value;
		int fieldDeclleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).left;
		int fieldDeclright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).right;
		ArrayList<Field> fieldDecl = (ArrayList<Field>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-6)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Stmt> stmts = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 RESULT = new FunctionDecl(id, "void", fieldDecl, stmts); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("functionDeclVoid",4, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-9)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // functionDeclReturn ::= FDEF ID LPAREN fieldDeclOptional RPAREN COLON typeSpecifier LBRACE funcStmtList RBRACE 
            {
              Decl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-8)).value;
		int fieldDeclleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).left;
		int fieldDeclright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-6)).right;
		ArrayList<Field> fieldDecl = (ArrayList<Field>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Stmt> stmts = (ArrayList<Stmt>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 
						RESULT = new FunctionDecl(id, type, fieldDecl, stmts); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("functionDeclReturn",5, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-9)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functionDecl ::= FDEF error RBRACE 
            {
              Decl RESULT =null;
		 System.err.println("Invalid function definition or missing return statement"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("functionDecl",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // functionDecl ::= functionDeclReturn 
            {
              Decl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Decl f = (Decl)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = f; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("functionDecl",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // functionDecl ::= functionDeclVoid 
            {
              Decl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Decl f = (Decl)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 RESULT = f; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("functionDecl",3, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variableDecl ::= ID COLON error SEMI 
            {
              Decl RESULT =null;
		 System.err.println("Invalid variable declaration"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("variableDecl",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variableDecl ::= ID COLON typeSpecifier EQ sequence SEMI 
            {
              Decl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Expr> seq = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		
						RESULT = new VariableDecl(id, type, seq);
						
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("variableDecl",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-5)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variableDecl ::= ID COLON typeSpecifier SEMI 
            {
              Decl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		
						RESULT = new VariableDecl(id, type, null);
						
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("variableDecl",6, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // typeDecl ::= TDEF error SEMI 
            {
              Decl RESULT =null;
		 System.err.println("Invalid type declaration"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("typeDecl",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // typeDecl ::= TDEF ID COLON fieldDecl SEMI 
            {
              Decl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Field> f = (ArrayList<Field>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		
						//AST
						RESULT = new TypeDecl(id, f);
						
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("typeDecl",7, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-4)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declList ::= declList error RBRACE 
            {
              ArrayList<Decl> RESULT =null;
		 System.err.println("Invalid function definition"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-2)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declList ::= 
            {
              ArrayList<Decl> RESULT =null;
		 RESULT = new ArrayList<Decl>(); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declList ::= declList functionDecl 
            {
              ArrayList<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Decl> d = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Decl f = (Decl)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 
                        //AST
						d.add(f);
						RESULT = d;
						//Error checking
                        QCup.section = "Function Declaration"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declList ::= declList variableDecl 
            {
              ArrayList<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Decl> d = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Decl v = (Decl)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 
                        //AST
						d.add(v);
						RESULT = d;
						//Error checking
                        QCup.section = "Variable Declaration"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declList ::= declList typeDecl 
            {
              ArrayList<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Decl> d = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		Decl t = (Decl)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 
                        //AST
						d.add(t);
						RESULT = d;
						//Error checking
                        QCup.section = "Type Declaration"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declList ::= declList mainDecl 
            {
              ArrayList<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Decl> d = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		 
						//AST
						RESULT = d;
						//Error checking
						QCup.section = "Main Body Declaration"; 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declList error 
            {
              Program RESULT =null;
		 System.err.println("No main declaration at the end of file"); 
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		RESULT = start_val;
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$QCup$parser.done_parsing();
          return CUP$QCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declList mainDecl 
            {
              Program RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)).right;
		ArrayList<Decl> l = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$QCup$stack.elementAt(CUP$QCup$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()).right;
		MainDecl m = (MainDecl)((java_cup.runtime.Symbol) CUP$QCup$stack.peek()).value;
		 
                 
	                    
	                    //Errors and info
	                    QCup.section = "Main Declaration"; 
	                    if(QCup.numOfErrors == 0 && QCup.numOfMains==1) {System.out.println("Parsing successful"); RESULT = new Program(l, m); }
	                    else {
	                    if(QCup.numOfErrors == 1) System.out.println("Parsing unsuccessful, you had " + QCup.numOfErrors + " error.");
	                    else System.out.println("Parsing unsuccessful, you had " + QCup.numOfErrors + " errors."); 
	                    if(parser.numOfMains > 1) System.err.println("You declared " + parser.numOfMains + " main programs. Only one main is accepted."); 
	                    RESULT = null;
	                    }
	                    
              CUP$QCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$QCup$stack.elementAt(CUP$QCup$top-1)), ((java_cup.runtime.Symbol)CUP$QCup$stack.peek()), RESULT);
            }
          return CUP$QCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

